# CI for Rust projects. This compiles (using sccache), runs tests, and checks formatting.

# Customization:
# - all customization should be available via inputs. If anything isn't available, try to add it to this as an input instead of copying and modifying directly

name: Rust CI
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  workflow_call:
    inputs:
      minimum_coverage:
        type: string
        default: "24"
        required: false
      run_clippy:
        type: boolean
        default: false
        required: false
      rust_root:
        description: Root of the rust code tree. May be a relative path.
        type: string
        required: false
      test_matrix_rust_version:
        description: 'A JS array list of versions to be included in the test matrix. Defaults to "["beta"]".'
        required: false
        default: '["beta"]'
        type: string
      test_matrix_build_only:
        description: 'Whether to build only or build and test. Defaults to "[false]" on the assumption tests are only desired on the main version defined in `include`.'
        required: false
        default: "[true]"
        type: string
      test_matrix_build_args:
        description: "Matrix args for the `cargo build` called in the job. Defaults to nothing, mostly useful in includes."
        required: false
        default: '[""]'
        type: string
      test_matrix_test_args:
        description: "Matrix args for the `cargo test` called in the job. Defaults to nothing, mostly useful in includes."
        required: false
        default: '[""]'
        type: string
      test_matrix_rust_target:
        description: "Matrix of rust targets for a build. Defaults to nothing (which will use the system target). Mostly useful in includes."
        required: false
        default: '[""]'
        type: string
      test_matrix_include:
        description: 'Specific combinations to add to the test matrix. Defaults to "[{ rust_version: "", build_only: false }]" which will build and run tests using the toolchain version. Available values are: rust_version, build_only, build_args, test_args'
        required: false
        default: '[{ rust_version: "", build_only: false }]'
        type: string
      additional_system_deps:
        description: 'A single string of additional dependencies to install on the ubuntu runner using `apt`, ex "libzmq3-dev openssl".'
        type: string
        required: false
        default: ""
      cargo_command_env_vars:
        description: 'A space-separated string of environment variable pairs to put before all the `cargo` commands, ex "RUST_LOG=info"'
        type: string
        required: false
        default: ""
      cargo_command_test_args:
        description: "A string of args to put after the `cargo test` command in all invocations throughout the workflow."
        type: string
        required: false
        default: ""
    secrets:
      TOOL_CACHE_SECRET_KEY:
        description: "AWS secret key to access our Rust tool cache S3 bucket."
        required: true
      SCCACHE_AWS_SECRET:
        description: "AWS secret key to access our sccache S3 bucket."
        required: true

jobs:
  # Assigns some variables, because GHA doesn't expand variables in inputs.*.default.
  vars:
    runs-on: buildjet-2vcpu-ubuntu-2204
    outputs:
      rust_root: ${{ steps.rust_root.outputs.rust_root }}
    steps:
      - id: rust_root
        run: |
          if [ -n "${{ inputs.rust_root }}" ] ; then
            root="${{ inputs.rust_root }}"
          else
            root="${{ github.workspace }}"
          fi
          echo "rust_root=$root" >> $GITHUB_OUTPUT

  cargo-test:
    runs-on: buildjet-2vcpu-ubuntu-2204
    needs: vars
    strategy:
      matrix:
        rust_version: "${{ fromJSON(inputs.test_matrix_rust_version) }}"
        build_only: "${{ fromJSON(inputs.test_matrix_build_only) }}"
        build_args: "${{ fromJSON(inputs.test_matrix_build_args) }}"
        test_args: "${{ fromJSON(inputs.test_matrix_test_args) }}"
        rust_target: "${{ fromJSON(inputs.test_matrix_rust_target) }}"
        include: ${{ fromJSON(inputs.test_matrix_include) }}
    steps:
      - name: Configure git ssh access
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          echo '${{ secrets.LEEROY_PRIVATE_SSH_KEY }}' > "${HOME}/.ssh/id_ed25519"
          chmod 600 "${HOME}/.ssh/id_ed25519"
          ssh-keyscan github.com > "${HOME}/.ssh/known_hosts"
      - uses: actions/checkout@v3
      - name: Install additional dependencies
        if: ${{ inputs.additional_system_deps != '' }}
        run: sudo apt install ${{ inputs.additional_system_deps }}
      - uses: IronCoreLabs/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust_version }}
          targets: ${{ matrix.rust_target }}
      - name: Install sccache
        uses: IronCoreLabs/rust-install@v0.1.0
        with:
          crate: sccache
          accesskey: AKIAU2WBY6VDTC563V7G
          secretkey: ${{ secrets.TOOL_CACHE_SECRET_KEY }}
          os: buildjet-2vcpu-ubuntu-2204
          version: latest
      - name: Setup sccache env variables
        run: |
          echo "CC=$(which cc)" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=$HOME/.cargo/bin/sccache" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=AKIAU2WBY6VDVHUO5WSN" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.SCCACHE_AWS_SECRET }}" >> $GITHUB_ENV
          echo "SCCACHE_BUCKET=sccache-rust" >> $GITHUB_ENV
          echo "SCCACHE_S3_USE_SSL=true" >> $GITHUB_ENV
          echo "SCCACHE_REGION=us-west-2" >> $GITHUB_ENV
      - uses: Swatinem/rust-cache@v2
        with:
          cache-provider: buildjet
      - name: Set Rust target
        if: ${{ matrix.rust_target != '' }}
        run: echo "TARGET_FLAGS=--target ${{ matrix.rust_target }}" >> $GITHUB_ENV
      - run: ${{inputs.cargo_command_env_vars}} cargo build ${{ matrix.build_args }}
        working-directory: ${{ needs.vars.outputs.rust_root }}
      - run: ${{inputs.cargo_command_env_vars}} cargo test ${{ matrix.test_args }} ${{ inputs.cargo_command_test_args }}
        working-directory: ${{ needs.vars.outputs.rust_root }}
      - name: Print sccache stats
        run: sccache -s

  coverage:
    runs-on: buildjet-2vcpu-ubuntu-2204
    needs: vars
    if: github.actor != 'dependabot[bot]' && github.event_name == 'pull_request'
    steps:
      - name: Configure git ssh access
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          echo '${{ secrets.LEEROY_PRIVATE_SSH_KEY }}' > "${HOME}/.ssh/id_ed25519"
          chmod 600 "${HOME}/.ssh/id_ed25519"
          ssh-keyscan github.com > "${HOME}/.ssh/known_hosts"
      - uses: actions/checkout@v3
      - name: Install additional dependencies
        if: ${{ inputs.additional_system_deps != '' }}
        run: sudo apt install ${{ inputs.additional_system_deps }}
      - uses: IronCoreLabs/rust-toolchain@v1
      - name: Install sccache
        uses: IronCoreLabs/rust-install@v0.1.0
        with:
          crate: sccache
          accesskey: AKIAU2WBY6VDTC563V7G
          secretkey: ${{ secrets.TOOL_CACHE_SECRET_KEY }}
          os: buildjet-2vcpu-ubuntu-2204
          version: latest
      - name: Setup sccache env variables
        run: |
          echo "CC=$(which cc)" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=$HOME/.cargo/bin/sccache" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=AKIAU2WBY6VDVHUO5WSN" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.SCCACHE_AWS_SECRET }}" >> $GITHUB_ENV
          echo "SCCACHE_BUCKET=sccache-rust" >> $GITHUB_ENV
          echo "SCCACHE_S3_USE_SSL=true" >> $GITHUB_ENV
          echo "SCCACHE_REGION=us-west-2" >> $GITHUB_ENV
      - uses: Swatinem/rust-cache@v2
        with:
          cache-provider: buildjet
      - uses: taiki-e/install-action@cargo-llvm-cov
      - name: Run llvm-cov
        run: ${{inputs.cargo_command_env_vars}} cargo llvm-cov --html ${{ inputs.cargo_command_test_args }}
        working-directory: ${{ needs.vars.outputs.rust_root }}
      - name: Get Cobertura report as well
        run: ${{inputs.cargo_command_env_vars}} cargo llvm-cov report --cobertura --output-path cobertura.xml
        working-directory: ${{ needs.vars.outputs.rust_root }}
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: ${{ needs.vars.outputs.rust_root }}/target/llvm-cov/html/
      - name: Post code coverage to PR comment
        if: ${{ github.base_ref != '' }}
        uses: 5monkeys/cobertura-action@v13
        with:
          path: ${{ needs.vars.outputs.rust_root }}/cobertura.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          only_changed_files: true
          show_line: true
          # increase as we are able
          minimum_coverage: ${{ inputs.minimum_coverage }}

  format:
    runs-on: buildjet-2vcpu-ubuntu-2204
    needs: vars
    steps:
      - name: Configure git ssh access
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          echo '${{ secrets.LEEROY_PRIVATE_SSH_KEY }}' > "${HOME}/.ssh/id_ed25519"
          chmod 600 "${HOME}/.ssh/id_ed25519"
          ssh-keyscan github.com > "${HOME}/.ssh/known_hosts"
      - uses: actions/checkout@v3
      - uses: IronCoreLabs/rust-toolchain@v1
        with:
          components: rustfmt
      - run: ${{inputs.cargo_command_env_vars}} cargo fmt --all -- --check
        working-directory: ${{ needs.vars.outputs.rust_root }}
      - name: Install cargo-sort
        uses: IronCoreLabs/rust-install@v0.1.0
        with:
          crate: cargo-sort
          accesskey: AKIAU2WBY6VDTC563V7G
          secretkey: ${{ secrets.TOOL_CACHE_SECRET_KEY }}
          os: buildjet-2vcpu-ubuntu-2204
          version: latest
      - run: |
          if grep -q '\[workspace]' Cargo.toml ; then
            ${{inputs.cargo_command_env_vars}} cargo sort --check --workspace
          else
            ${{inputs.cargo_command_env_vars}} cargo sort --check
          fi
        working-directory: ${{ needs.vars.outputs.rust_root }}
      - name: Cancel workflow
        if: failure()
        uses: andymckay/cancel-action@0.3

  clippy:
    name: Clippy
    runs-on: buildjet-2vcpu-ubuntu-2204
    needs: vars
    if: inputs.run_clippy
    steps:
      - name: Configure git ssh access
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          echo '${{ secrets.LEEROY_PRIVATE_SSH_KEY }}' > "${HOME}/.ssh/id_ed25519"
          chmod 600 "${HOME}/.ssh/id_ed25519"
          ssh-keyscan github.com > "${HOME}/.ssh/known_hosts"
      - uses: actions/checkout@v3
      - name: Install additional dependencies
        if: ${{ inputs.additional_system_deps != '' }}
        run: sudo apt install ${{ inputs.additional_system_deps }}
      - uses: IronCoreLabs/rust-toolchain@v1
        with:
          components: clippy
      - run: ${{inputs.cargo_command_env_vars}} cargo clippy -- -D warnings
        working-directory: ${{ needs.vars.outputs.rust_root }}
