# This workflow updates files in the deployments repository, to use a new version of a docker image.

# 1. Make a PR to update the generic recipe of the application to use the new container image.
# 2. Change the staging environment to reference that PR branch.
# 3. Comment on the original PR in the software repo, pointing to the deployment PR.
# 4. Update local dev clusters to use the new container image.

name: Deploy
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
'on':
  workflow_call:
    inputs:
      tag:
        type: string
        description: Git tag to be released.
        required: true
      images:
        type: string
        description: Space separated list of token replacements to be passed to "kustomize edit set image". placeholder=image:tag
        required: true
      image-override:
        type: string
        description: Override the second part of the images list, to select public or private container registry.
    secrets:
      WORKFLOW_PAT:
        description: GitHub personal access token with at least "repo" permissions to both this repo and the deployments repo.
        required: true
jobs:
  deploy-overlay:
    runs-on: ubuntu-22.04
    steps:
    - name: Set up GitHub auth
      run: |
        echo "GITHUB_TOKEN=${{ secrets.WORKFLOW_PAT }}" >> "$GITHUB_ENV"
    - name: Install JSON tools
      run: pip3 install jsonpatch pyyaml
    - name: Build yaml2json, json2yaml
      run: |
        mkdir -p ~/bin
        cat - << EOF > ~/bin/json2yaml
        #!/usr/bin/env python3
        import json
        import sys
        import yaml
        sys.stdout.write(yaml.dump(json.load(sys.stdin),sort_keys=False))
        EOF
        cat - << EOF > ~/bin/yaml2json
        #!/usr/bin/env python3
        import json
        import sys
        import yaml
        json.dump(yaml.full_load(sys.stdin),sys.stdout)
        EOF
        chmod +x ~/bin/json2yaml ~/bin/yaml2json
        echo "${HOME}/bin" >> ${GITHUB_PATH}

    - name: Check out software repo
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.tag }}
        path: software
    # Find the original PR to the software repo. The git tag should correspond to a GitHub release, which should have a
    # description pointing to the PR number.
    - name: Get original PR
      id: software-pr
      working-directory: software
      run: |
        set -x
        gh release view ${{ inputs.tag }} --json body --jq '.body' | sed 's/.*latest_pr:\([0-9]*\).*/\1/' > /tmp/pr
        PR=$(cat /tmp/pr)
        if [ -z "${PR}" ] || [ "${PR}" = "null" ] ; then
          exit 0
        fi
        echo "pr=$PR" >> "$GITHUB_OUTPUT"
        AUTHOR=$(gh pr view ${PR} --json author --jq '.author.login')
        if [ -n "$AUTHOR" ] ; then
          echo "author=$AUTHOR" >> "$GITHUB_OUTPUT"
        fi

    # Make a PR to the deployments repo.
    - name: Check out deployments
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: IronCoreLabs/deployments
        path: deployments
        token: ${{ secrets.WORKFLOW_PAT }}
    - name: Update deployments
      id: update-recipes
      working-directory: deployments
      run: |
        set -x
        for DIR in apps/*/base apps/*/mixins/* ; do
          if ! [ -d "${DIR}" ] ; then
            continue
          fi
          (
            cd "${DIR}"
            FILE="kustomization.yaml"
            for IMG in ${{ inputs.images }} ; do
              PLACEHOLDER=$(echo "${IMG}" | sed 's/=.*//')
              NEW_NAME=$(echo "${IMG}" | sed 's/[^=]*=//')
              if [ -n "${{ inputs.image-override }}" ] ; then
                NEW_NAME="${{ inputs.image-override }}"
              fi
              yaml2json < "${FILE}" > /tmp/kust.json
              jq --arg name "${PLACEHOLDER}" '[(.images // []) | .[] | .name == $name] | any' < /tmp/kust.json > /tmp/status
              if [ $(cat /tmp/status) = true ] ; then
                kustomize edit set image "${PLACEHOLDER}=${NEW_NAME}:${{ inputs.tag }}"
                echo "${DIR}" | sed 's,apps/\([^/]*\)/.*,\1,' >> /tmp/edited-dirs
                git add "kustomization.yaml"
              fi
            done
          )
        done
        if ! [ -f /tmp/edited-dirs ] ; then
          echo "No recipes found with any of '${{ inputs.images }}' in them."
          exit 1
        fi
        EDITED="$(sort -u < /tmp/edited-dirs | tr '\n' ' ' | sed 's/ $//')"
        echo "edited-recipes=${EDITED}" >> $GITHUB_OUTPUT
    - name: Commit and PR to deployments
      id: promote-pr
      working-directory: deployments
      run: |
        set -x
        git config --global user.email ops@ironcorelabs.com
        git config --global user.name "Leeroy Travis"
        THISREPO="$(basename ${{ github.repository }})"
        NEW_BRANCH="${THISREPO}-${{ inputs.tag }}"
        echo "branch=${NEW_BRANCH}" >> "$GITHUB_OUTPUT"
        git checkout -b "${NEW_BRANCH}"
        COMMIT_MSG="Upgrade: [ ${THISREPO} -> ${{ inputs.tag }} ]"
        git commit -m "${COMMIT_MSG}"
        git push -u origin "${NEW_BRANCH}"

        # If we can't find the originating PR, it must mean the change came from automation, and we should auto-promote.
        if [ -z "${{ steps.software-pr.outputs.pr }}" ] ; then
          LABELS="--label auto-promote"
        fi
        AUTHOR="${{ steps.software-pr.outputs.author }}"
        if [ -n "$AUTHOR" ] ; then
          ASSIGNEE="--assignee $AUTHOR --reviewer $AUTHOR"
        fi
        gh pr create --fill $ASSIGNEE $LABELS
        PR=$(gh pr view --json number --jq .number)
        echo "pr=$PR" >> "$GITHUB_OUTPUT"

    # Update staging to use the new branch we just created.
    - name: Update staging
      id: update-staging
      working-directory: deployments
      run: |
        set -x
        git checkout main
        git checkout -b "test-${THISREPO}-${{ inputs.tag }}"
        for RECIPE in "${{ steps.update-recipes.outputs.edited-recipes }}" ; do
          for DIR in envs/staging/* ; do
            if ! [ -d "${DIR}" ] ; then
              continue
            fi
            (
              cd "${DIR}"
              FILE="kustomization.yaml"
              REPO="/apps/${RECIPE}"
              if yaml2json < "${FILE}" | jq -e --arg repo "${REPO}" '[.resources[] | contains($repo + "/")] | any' ; then
                if grep -q "${REPO}/[^?]*\?ref=.*" kustomization.yaml ; then
                  echo "${DIR}/kustomization.yaml is already testing another PR branch."
                  echo "changed=false" >> $GITHUB_OUTPUT
                  echo "message=${DIR}/kustomization.yaml is already testing another PR branch." >> $GITHUB_OUTPUT
                  exit 0
                fi
                sed "s^\(${REPO}/[^?]*\)$^\1?ref=${{ steps.promote-pr.outputs.branch }}^" < kustomization.yaml > /tmp/new
                mv /tmp/new kustomization.yaml
                git add kustomization.yaml
                touch /tmp/changed-files
              fi
            )
          done
        done
        if [ -f /tmp/changed-files ] ; then
          echo "changed=true" >> "$GITHUB_OUTPUT"
        fi
    - name: Commit and push to staging
      if: "${{ steps.update-staging.outputs.changed == 'true' }}"
      working-directory: deployments
      run: |
        git commit -m "Test PR #${{ steps.promote-pr.outputs.pr }}"
        git push -u origin "test-${THISREPO}-${{ inputs.tag }}"
        echo "This PR is to test #${{ steps.promote-pr.outputs.pr }} in staging." >> /tmp/body.txt
        echo ""
        echo "This PR should only modify non-production files, and it should be auto-approved shortly." >> /tmp/body.txt
        echo "Once it's auto-approved, it should auto-merge." >> /tmp/body.txt
        gh pr create --assignee @me --fill --body-file /tmp/body.txt
        gh pr merge --auto --squash

    # Comment on the original software PR, pointing to the new deployments PR.
    - name: Comment on the software PR
      if: "${{ steps.software-pr.outputs.pr != ''}}"
      working-directory: software
      run: |
        set -x
        echo "Created IronCoreLabs/deployments#${{ steps.promote-pr.outputs.pr }} to deploy this build." >> /tmp/body.txt
        if [ -n "${{ steps.update-staging.outputs.message }}" ] ; then
          echo "${{ steps.update-staging.outputs.message }}" >> /tmp/body.txt
        elif [ "${{ steps.update-staging.outputs.changed }}" = "true" ] ; then
          echo "This build is ready for promotion to prod." >> /tmp/body.txt
        else
          echo "No apps in staging use this software; you'll need to manually evaluate the PR." >> /tmp/body.txt
        fi
        gh pr comment -F /tmp/body.txt ${{ steps.software-pr.outputs.pr }}

    # Update the local dev clusters to use the new container.
    - name: Check out depot
      uses: actions/checkout@v4
      with:
        repository: IronCoreLabs/depot
        path: depot
        token: ${{ secrets.WORKFLOW_PAT }}
    - name: Update local dev clusters
      id: update-depot
      working-directory: depot/local-dev-cluster
      run: |
        set -x
        for IMG in ${{ inputs.images }} ; do
          IMG_NAME=$(echo "${IMG}" | sed 's/[^=]*=//')
          if [ -n "${{ inputs.image-override }}" ] ; then
            IMG_NAME="${{ inputs.image-override }}"
          fi
          if grep "${IMG_NAME}" Tiltfile ; then
            sed "s,\(FROM ${IMG_NAME}:\)[a-zA-Z0-9_.-]*,\\1${{ inputs.tag }}," < Tiltfile > Tiltfile.new
            mv Tiltfile.new Tiltfile
            touch /tmp/changed-depot
          fi
        done
        if [ -f /tmp/changed-depot ] ; then
          echo "changed=true" >> "$GITHUB_OUTPUT"
        fi
    - name: Commit and push to depot
      if: "${{ steps.update-depot.outputs.changed == 'true' }}"
      working-directory: depot
      run: |
        COMMIT_MSG="Upgrade local-dev-cluster: [ ${THISREPO} -> ${{ inputs.tag }} ]"
        git commit -m "${COMMIT_MSG}"
        TRIES=0
        # If git push fails, it's hopefully just a concurrent update that we can retry.
        while ! git push ; do
          TRIES=$(expr ${TRIES} + 1)
          if [ "${TRIES}" -ge 5 ] ; then
            break
          fi
          git pull
          sleep 30
        done
