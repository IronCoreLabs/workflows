# This workflow builds a docker container, plus more:
# - Performs a virus scan.
# - Pushes the container to a registry.
# - If triggered by a prerelease, this workflow publishes the release when it's done. (This triggers the deploy workflow.)
# - If triggered by workflow_dispatch:
#   - Takes an optional git ref for sources to build from.
#   - Takes an optional image tag name.
#   - Optionally triggers deploy when done.

name: Docker

on:
  workflow_call:
    inputs:
      image_name:
        description: Image base name, without tag.
        type: string
        required: true
      build_command:
        description: Command to run to build docker image. `${DOCKER_FULL_NAME}` should be used as the tag name.
        type: string
        required: false
        default: ""
      buildlog_repo:
        type: string
        required: false
        default: ""
      buildlog_filename:
        type: string
        required: false
        default: "${{ github.repository }}.json"
      additional_decryption_files:
        description: Space-separated list of additional `.iron` files to decrypt. Gcloud credentials will already be decrypted.
        type: string
        required: false
        default: ""
      archs:
        description: Space-separated list of architectures to build.
        type: string
        required: false
        default: amd64
      docker_runs_on:
        description: JSON list of runners to use for `docker` job within the workflow.
        type: string
        required: false
        default: '["buildjet-2vcpu-ubuntu-2204"]'
      other_jobs_runs_on:
        description: Runner to use for `image` and `publish` jobs within the workflow.
        type: string
        required: false
        default: "ubuntu-22.04"
      configure_git_ssh:
        description: Whether to configure git ssh with LEEROY_PRIVATE_SSH_KEY repository secret.
        type: boolean
        required: false
        default: false
      setup_scala_java_version:
        description: If set, calls setup-scala with the provided java version number before building.
        type: string
        required: false
        default: ""
      extra_commands:
        description: Extra commands to run before building the Docker image
        type: string
        required: false
        default: ""
      skip_update_release:
        description: "`true` to skip marking the triggering release as `prerelease: false`."
        type: boolean
        required: false
        default: false
      docker_build_target:
        description: "Extra target flag to pass to the `docker build` command. Note that this should include the `--target` as well."
        type: string
        required: false
        default: ""
      workflow_repo_ref_override:
        description: Ref for `workflows` repo to check out if `docker.buildlog.sh` is needed. If unset, `main` will be checked out.
        type: string
        required: false
        default: ""

env:
  DOCKER_BUILDKIT: 1

jobs:
  image:
    if: github.actor != 'dependabot[bot]'
    runs-on: ${{ inputs.other_jobs_runs_on }}
    env:
      DOCKER_IMAGE: ${{ inputs.image_name }} # This is needed by custom commands at runtime.
    outputs:
      images: ${{ steps.images.outputs.images }}
      tags: ${{ steps.tag.outputs.tags }}
      longtag: ${{ steps.tag.outputs.longest }}
    steps:
      - name: Set docker image tags
        id: tag
        run: |
          if [ -n "${{ github.event.release.name }}" ] ; then
            # If TAG is 1.2.3, set TAGS to "1.2.3 1.2 1".
            TAG="${{ github.event.release.name }}"
            while ! [ -z "${TAG}" ] ; do
              TAGS="${TAGS} ${TAG}"
              TAG=$(echo ${TAG} | sed -E 's,\.?[^.]+$,,')
            done
            TAGS=$(echo $TAGS | sed 's,^ ,,')
          fi
          if [ -n "${{ github.event.inputs.tags }}" ] ; then
            TAGS="${{ github.event.inputs.tags }}"
          fi
          if [ "${{ github.event_name }}" = "pull_request" ] ; then
            PR=$(jq < "${GITHUB_EVENT_PATH}" -r '.number')
            TITLE="$(jq < "${GITHUB_EVENT_PATH}" -r '.pull_request.title' | tr -cs '[:alnum:]' - | sed -e 's/^-//' -e 's/-$//')"
            TAGS="pr-${PR}-${TITLE}"
          fi
          if [ -z "${TAGS}" ] ; then
            echo "Couldn't set tags."
            exit 1
          fi
          # Tags is a space-separated list of tags. Export the longest one so it can be used in the buildlog.
          for T in ${TAGS} ; do
            if [ ${#T} -gt ${#LONGESTTAG} ] ; then
              LONGESTTAG=$T
            fi
          done
          echo "longest=${LONGESTTAG}" >> "$GITHUB_OUTPUT"
          # Tags is a space-separated list of tags. Sort them from longest to shortest.
          for T in ${TAGS} ; do
            echo "$T"
          done | awk '{ print length, $0 }' | sort -nr | awk '{ print $2 }' | tee tags
          echo "tags=${TAGS}" >> "$GITHUB_OUTPUT"
      - name: Set docker image names
        id: name
        run: |
          for TAG in ${{ steps.tag.outputs.tags }} ; do
            if ! [[ ${TAG} =~ ^[0-9.]*$ ]] ; then
              DOCKER_IMAGE="$(echo ${DOCKER_IMAGE} | sed 's/ironcore-images/ironcore-dev-1/')"
            fi
          done
          echo "name=${DOCKER_IMAGE}" >> "$GITHUB_OUTPUT"
      - name: Output docker image identifiers
        id: images
        run: |
          for T in ${{ steps.tag.outputs.tags }} ; do
            echo -n "${{ steps.name.outputs.name }}:${T} "
          done | \
          # Eat the trailing space.
          sed 's/ $//' | tee images
          echo "Docker tags: '${{ steps.tag.outputs.tags }}'"
          echo "All images: '$(cat images)'"
          echo "images=$(cat images)" >> "$GITHUB_OUTPUT"

  docker:
    needs: image
    strategy:
      matrix:
        runs_on: ${{ fromJson(inputs.docker_runs_on) }}
    runs-on: ${{ matrix.runs_on }}
    steps:
      - uses: actions/checkout@v4
        with:
          # Either the workflow_dispatch ref, or the prerelease tag, whichever is set.
          ref: ${{ github.event.inputs.ref }}${{ github.event.release.tag_name }}
      - name: Log in to docker
        # This avoids rate limits. https://buildjet.com/for-github-actions/docs/faq#docker-rate-limiting
        uses: docker/login-action@v2
        with:
          username: ironcoreci
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get canonical arch name
        id: arch
        run: |
          ARCH="${{ runner.arch }}"
          case "${ARCH}" in
          X64)
            ARCH=amd64
            ;;
          ARM64)
            ARCH=arm64
            ;;
          *)
            echo "Unknown arch '${ARCH}'"
            exit 1
          esac
          echo "Arch is '${ARCH}'"
          echo "arch=${ARCH}" >> "$GITHUB_OUTPUT"
      - name: Configure git ssh access
        if: inputs.configure_git_ssh
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          echo '${{ secrets.LEEROY_PRIVATE_SSH_KEY }}' > "${HOME}/.ssh/id_ed25519"
          chmod 600 "${HOME}/.ssh/id_ed25519"
          ssh-keyscan github.com > "${HOME}/.ssh/known_hosts"
      - name: Install clamav
        if: ${{ ! contains(matrix.runs_on, 'self-hosted') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y clamav
          sudo sed -i -e 's/^ReceiveTimeout.*/ReceiveTimeout 300/' /etc/clamav/freshclam.conf
          sudo systemctl stop clamav-freshclam
          sudo freshclam
          sudo systemctl start clamav-freshclam
      - name: Decrypt files
        uses: IronCoreLabs/ironhide-actions/decrypt@v3
        with:
          keys: ${{ secrets.IRONHIDE_KEYS }}
          input: .github/gcloud-auth.json.iron ${{ inputs.additional_decryption_files }}
      - name: Configure gcloud
        run: |
          gcloud auth activate-service-account --key-file .github/gcloud-auth.json
          gcloud auth configure-docker --quiet
      - name: Get canonical image name
        id: name
        run: echo "canonical=$(echo ${{ needs.image.outputs.images }} | sed 's/ .*//')" >> "$GITHUB_OUTPUT"
      - name: Extra commands
        if: inputs.extra_commands != ''
        run: ${{ inputs.extra_commands }}
      - name: Setup Scala
        if: inputs.setup_scala_java_version != ''
        uses: olafurpg/setup-scala@v13
        with:
          java-version: ${{ inputs.setup_scala_java_version }}
      - name: Build docker (Default)
        if: inputs.build_command == ''
        env:
          DOCKER_FULL_NAME: ${{ steps.name.outputs.canonical }}-${{ steps.arch.outputs.arch }}
        run: |
          docker build \
          --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.SCCACHE_AWS_SECRET }} \
          ${{ inputs.configure_git_ssh && '--ssh=default="${HOME}/.ssh/id_ed25519"' || '' }} \
          ${{ inputs.docker_build_target }} \
          --pull -t ${DOCKER_FULL_NAME} .
      - name: Build docker (Overridden)
        if: inputs.build_command != ''
        env:
          DOCKER_FULL_NAME: ${{ steps.name.outputs.canonical }}-${{ steps.arch.outputs.arch }}
        run: ${{ inputs.build_command }}
      # If the above command didn't produce the right image, the scan below will fail. That's what we want.
      - name: Scan docker image
        run: |
          docker save -o /tmp/docker.tar "${{ steps.name.outputs.canonical }}-${{ steps.arch.outputs.arch }}"
          clamscan /tmp/docker.tar
      - name: Push it!
        run: docker push "${{ steps.name.outputs.canonical }}-${{ steps.arch.outputs.arch }}"
      - name: Container hash
        id: container-hash
        run: |
          # Now that we've pushed the image, we can retrieve its hash and sanity check it.
          IMG="${{ steps.name.outputs.canonical }}-${{ steps.arch.outputs.arch }}"
          HASH=$(docker inspect --format='{{ index .RepoDigests 0 }}' "${IMG}" | sed 's/.*@sha256://')
          echo "hash=${HASH}" >> "$GITHUB_OUTPUT"
          [[ "${HASH}" =~ ^[0-9a-f]+$ ]]
      - name: Check out buildlog repo
        # The head_ref or source branch of the pull request in a workflow run. This property is only available when the event that triggers a workflow run is either pull_request or pull_request_target.
        # So this conditional checks that the trigger was _not_ a pull_request.
        # The "contains()" conditional checks that this is a release like 1.2.3, not a prerelease like 1.2.3-rc.1.
        if: ${{ github.head_ref == '' && inputs.buildlog_repo != '' && !contains(needs.image.outputs.longtag, '-') }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.buildlog_repo }}
          token: ${{ secrets.WORKFLOW_PAT }}
          fetch-depth: 2
          path: .github/tmp_buildlog_dir
      - name: Checkout workflows repo
        if: ${{ github.head_ref == '' && inputs.buildlog_repo != '' && !contains(needs.image.outputs.longtag, '-')}}
        uses: actions/checkout@v4
        with:
          repository: IronCoreLabs/workflows
          ref: ${{ inputs.workflow_repo_ref_override }} # If empty, `main` will be checked out
          token: ${{ secrets.WORKFLOW_PAT }}
          fetch-depth: 2
          path: .github/tmp_workflows_dir
      - name: Update buildlog
        if: ${{ github.head_ref == '' && inputs.buildlog_repo != '' && !contains(needs.image.outputs.longtag, '-')}}
        run: |
          git config --global user.email "ops@ironcorelabs.com"
          git config --global user.name "${{ github.repository }} CI"
          .github/tmp_workflows_dir/.github/docker.buildlog.sh "$(basename "${{ inputs.buildlog_filename }}")" "${{ needs.image.outputs.longtag }}-${ARCH}" "${{ steps.container-hash.outputs.hash }}"

  # This job pushes the image manifest (multi-arch image) and optionally creates a GitHub release.
  publish:
    needs: [docker, image]
    runs-on: ${{ inputs.other_jobs_runs_on }}
    steps:
      - uses: actions/checkout@v4
        with:
          # Either the workflow_dispatch ref, or the prerelease tag, whichever is set.
          ref: ${{ github.event.inputs.ref }}${{ github.event.release.tag_name }}
      - name: Decrypt gcloud credentials
        uses: IronCoreLabs/ironhide-actions/decrypt@v3
        with:
          keys: ${{ secrets.IRONHIDE_KEYS }}
          input: .github/gcloud-auth.json.iron
      - name: Configure gcloud
        run: |
          gcloud auth activate-service-account --key-file .github/gcloud-auth.json
          gcloud auth configure-docker --quiet
      - name: Get canonical image name
        id: name
        run: echo "canonical=$(echo ${{ needs.image.outputs.images }} | sed 's/ .*//')" >> "$GITHUB_OUTPUT"
      - name: Pull images
        run: |
          for ARCH in ${{ inputs.archs }} ; do
            docker pull "${{ steps.name.outputs.canonical }}-${ARCH}"
          done
      - name: Create and push manifest
        run: |
          for ARCH in ${{ inputs.archs }} ; do
            echo "${{ steps.name.outputs.canonical }}-${ARCH}"
          done | \
          xargs docker manifest create "${I}"
          docker manifest push "${I}"
      # This triggers the Deploy workflow's `release: released`
      - name: "Mark GitHub release as not prerelease"
        if: github.event.release != null && !inputs.skip_update_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.WORKFLOW_PAT }}
          prerelease: false
          allowUpdates: true
          tag: ${{ github.event.release.tag_name }}
          name: ${{ github.event.release.name }}
          omitBodyDuringUpdate: true
