# This workflow does version management, bumping the patch version on the main branch after a PR is merged.

# Requirements:
# - It needs a GitHub secret named WORKFLOW_PAT with a personal access token that has workflow permissions. The user that owns the
#   PAT must be allowed to push to the main branch of the repo. That usually means the user has to be a repo admin, and admins must
#   be excepted from branch protection rules on main.
# - Another workflow must consume the prereleases created by this one. That workflow should build and publish the release.

# Terminology:
# - In semver, everything before the optional "-" is the version, and everything after it is the prerelease version.
# - In this workflow, we can operate on the release part of the semver, or on the prerelease part of the semver.
# - In GitHub, we create a "release" object that can optionally have the "prerelease" flag set to true. The "docker.yaml" workflow
#   triggers on release events.
# I'm sorry the terminology is bad.

# Customize:
# It can work in either release mode or prerelease mode. That controls whether it increments the release version or the prerelease
# version. Here's an example of how the two modes transform the current version into the release version and bumped version:
# | mode    | release     | prerelease  |
# | current | 1.2.3-pre   | 1.2.3-pre.4 |
# | release | 1.2.3       | 1.2.3-rc.4  |
# | bumped  | 1.2.4-pre   | 1.2.3-pre.5 |
# The default mode is "release". To get "prerelease" mode, modify /env/MODE.

# Details:
# With our typical triggers, this workflow is triggered by merge to main, or by manual workflow_dispatch.
# 1. Make a release version. Depending on whether we're in "release" or "prerelease" mode:
#    - release: Remove the -prerelease info from the semver. (1.2.3-pre -> 1.2.3)
#    - prerelease: Remove any non-numeric characters from the prerelease part of the semver. (1.2.3-pre.4 -> 1.2.3-4)
# 2. Commit, push, tag, and create a GitHub prerelease.
# 3. Bump the version, and add `-pre` or `.pre` as a pre-release identifier.
#    - release: 1.2.3 -> 1.2.4-pre
#    - prerelease: 1.2.3-4 -> 1.2.3-pre.5
# 4. Commit and push.
# It parses the version info from files in the repo like Cargo.toml, package.json, or version.sbt. It updates those files when it
# bumps the version.
# Sanity checks ensure it's a valid semver, and it's not 0.0.0.

name: Bump Version

on:
  workflow_call:
    inputs:
      version:
        description: Semver release version from caller's workflow_dispatch. Should be set to `inputs.version` variable, or empty string if doesn't exist.
        type: string
        required: true
      release_mode:
        description: Whether to increment the release number (1.2.3 -> 1.2.4-pre) or the prerelease number (1.2.3-4 -> 1.2.3-pre.5). Defaults to "release".
        type: string
        required: false
        default: release
      release_prereleases:
        description: Whether to make a GitHub release for each prerelease version. Defaults to `true`.
        type: boolean
        required: false
        default: true
      workflows_repo_ref:
        description: Ref for `workflows` repo to check out. Defaults to tag `bump-version-v1`.
        type: string
        required: false
        default: "bump-version-v1"
      configure_git_ssh:
        description: Whether to configure git ssh with LEEROY_PRIVATE_SSH_KEY repository secret.
        type: boolean
        required: false
        default: false
      bump_version_release_prefix:
        description: Prefix to put on the front of release versions. Currently exists to put `v` at the start of TSC-Go versions.
        type: string
        required: false
        default: ""

jobs:
  # This job determines if we should run at all.
  skip:
    runs-on: ubuntu-22.04
    outputs:
      skip: ${{ steps.skip.outputs.skip }}
    if: github.event_name != 'pull_request'
    steps:
      - name: Maybe skip
        id: skip
        run: |
          # If it's a push to main, and any of the commits are from Dependabot, we should skip.
          if [ ${{ github.event_name }} = push ] ; then
            if [ $(jq -r < ${{ github.event_path }} '.commits | map(.author.name == "dependabot[bot]") | any') = true ] ; then
              echo "skip=true" >> "$GITHUB_OUTPUT"
            fi
          fi

  check-versions:
    runs-on: ubuntu-22.04
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout own repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW_PAT }}
          path: self
      - name: Checkout workflows repo
        uses: actions/checkout@v4
        with:
          repository: IronCoreLabs/workflows
          ref: ${{ inputs.workflows_repo_ref }}
          token: ${{ secrets.WORKFLOW_PAT }}
          path: workflows
      - name: Check all version numbers match
        run: ../workflows/.github/bump-version.get.sh
        working-directory: self

  bump:
    needs: skip
    runs-on: ubuntu-22.04
    if: ${{ !needs.skip.outputs.skip && github.event_name != 'pull_request'}}
    steps:
      - name: Checkout own repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW_PAT }}
          path: self
      - name: Checkout workflows repo
        uses: actions/checkout@v4
        with:
          repository: IronCoreLabs/workflows
          ref: ${{ inputs.workflows_repo_ref }}
          token: ${{ secrets.WORKFLOW_PAT }}
          path: workflows
      - name: Configure git
        run: |
          git config --global user.email ops@ironcorelabs.com
          git config --global user.name "Leeroy Travis"
      - name: Configure git ssh access
        if: inputs.configure_git_ssh
        run: |
          mkdir -p "${HOME}/.ssh"
          chmod 700 "${HOME}/.ssh"
          echo '${{ secrets.LEEROY_PRIVATE_SSH_KEY }}' > "${HOME}/.ssh/id_ed25519"
          chmod 600 "${HOME}/.ssh/id_ed25519"
          ssh-keyscan github.com > "${HOME}/.ssh/known_hosts"
      - name: Release
        id: release
        env:
          BUMP_VERSION_RELEASE_PREFIX: ${{ inputs.bump_version_release_prefix }}
        # Because the last step of this can race against other runs of this workflow, we need to retry in a loop.
        run: |
          set -x
          RETRIES=10
          TRY=0
          while [ $TRY -lt $RETRIES ] ; do
            TRY=$(expr $TRY + 1)
            # Get the current version.
            CURRENT=$(../workflows/.github/bump-version.get.sh)
            # Calculate next release version, and next dev version. Output to $GITHUB_OUTPUT, which we then read.
            ../workflows/.github/bump-version.bump.sh "${{ inputs.release_mode }}" "${CURRENT}" ${{ inputs.version }}
            . $GITHUB_OUTPUT
            # Set the in-tree version to the release version.
            ../workflows/.github/bump-version.set.sh "${release}"
            git diff --cached
            # GHA intermixes the stdout from git diff with stderr from "set -x", so we pause to let it settle.
            sleep 1
            git commit -m "Set release version ${release} [skip ci]"
            git tag "${release}"

            # Bump to the next development version.
            ../workflows/.github/bump-version.set.sh "${bumped}"
            git diff --cached
            sleep 1
            git commit -m "Bump to next development version ${bumped} [skip ci]"

            # If we push the release commit and its tag in one step, we hit strange race conditions where one client succeeds
            # pushing the tag, and another client succeeds pushing the commit. Instead, we push the commit first and then the tag.
            # That seems to cause the loser of the race to fail early.
            if git push origin "${{ github.ref }}" && git push origin "${release}" ; then
              # Just exit.
              exit 0
            fi

            # If the "git push" failed, then let's forget our last two commits, re-pull the latest changes, and try again.
            git reset --hard HEAD~2
            git tag -d "${release}"
            git pull origin "${{ github.ref }}"
            # Wait a little bit to let competing workflows finish their business.
            sleep 10
          done
          # Fallthrough for repeated failure case.
          echo "Failed to push bumped versions; tried $TRY times."
          exit 1
        working-directory: self
      - name: Generate release text
        id: release-body
        run: |
          set -x
          # Get the most recent commit. Hopefully it was a PR merge.
          COMMIT=$(jq -r '.after' ${{ github.event_path }})
          if [ "${COMMIT}" = "null" ] || [ -z "${COMMIT}" ] ; then
            exit 0
          fi
          # Get the most recent PRs; hopefully ours is one of them.
          curl -fSs -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.WORKFLOW_PAT }}" \
            https://api.github.com/repos/${{ github.repository }}/pulls?state=all\&base=${{ github.ref }}\&sort=updated\&direction=desc > /tmp/prs.json
          # Find a PR that resulted in our commit.
          PR=$(jq -r ".[] | select(.merge_commit_sha == \"${COMMIT}\") | .number" /tmp/prs.json)
          if [ "${PR}" = "null" ] || [ -z "${PR}" ] ; then
            exit 0
          fi
          # Build the string we'll use as the description of the release.
          echo "body=latest_pr:${PR}" >> "$GITHUB_OUTPUT"
        working-directory: self
      # This triggers the Docker workflow's `release: created`
      - name: Create GitHub Release
        id: github-release
        # If the release isn't a prerelease version OR you want to make releases for prerelease versions
        if: ${{ !contains(steps.release.outputs.release, '-') || inputs.release_prereleases }}
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_PAT }}
        run: gh release create "${{ steps.release.outputs.release }}" --title "${{ steps.release.outputs.release }}" --prerelease=true --notes "${{ steps.release-body.outputs.body }}"
        working-directory: self
      - name: Trigger Docker
        # If we didn't make a GitHub Release, we need to trigger the Docker workflow manually
        if: steps.github-release.outcome == 'skipped'
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_PAT }}
        run: |
          if [ -f .github/workflows/docker.yaml ] ; then
            gh workflow run docker.yaml -f "ref=${{ steps.release.outputs.release }}" -f "tags=${{ steps.release.outputs.release }}"
          fi
        working-directory: self
